" backup and swap dir
set backupdir=$HOME/.vim/vimtmp/
set dir=$HOME/.vim/vimswp/
"let $TMPDIR="$HOME/.vim/tmpfile/"

" Set display color
set t_Co=256

" tabline
let g:airiline#extensions#tabline#fnammod = ':t'

colorscheme deus

" filetype plugin and qf

filetype plugin on
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost l* nested lwindow

hi Normal ctermbg=NONE

" ranger chooser
function! RangeChooser()
	let temp = tempname()
	" The option "--choosefiles" was added in ranger 1.5.1. Use the next line
	" with ranger 1.4.2 through 1.5.0 instead.
	"exec 'silent !ranger --choosefile=' . shellescape(temp)
	if has("gui_running")
		exec 'silent !xterm -e ranger --choosefiles=' . shellescape(temp)
	else
		exec 'silent !ranger --choosefiles=' . shellescape(temp)
	endif
	if !filereadable(temp)
		redraw!
		" Nothing to read.
		return
	endif
	let names = readfile(temp)
	if empty(names)
		redraw!
		" Nothing to open.
		return
	endif
	" Edit the first item.
	exec 'edit ' . fnameescape(names[0])
	" Add any remaning items to the arg list/buffer list.
	for name in names[1:]
		exec 'argadd ' . fnameescape(name)
	endfor
	redraw!
endfunction

command! -bar RangerChooser call RangeChooser()

execute "so ".g:rc_path."tabline.vim"

function TexCompile()
	let l:path = expand('%:h')
	let l:file = expand('%:t')
	let l:shortfile = expand('%:t:r')
	if &ft == 'tex'
		execute '!cmd.exe /c "cd '.l:path.' & xelatex '.l:file.' & xelatex '.l:file.' & start '.l:shortfile.'.pdf"'
	endif
endfunction

" WSL yank support

set clipboard=unnamed

autocmd TextYankPost * call YankDebounced()

function! Yank(timer)
    call system('win32yank.exe -i --crlf', @")
    redraw!
endfunction

let g:yank_debounce_time_ms = 500
let g:yank_debounce_timer_id = -1

function! YankDebounced()
    let l:now = localtime()
    call timer_stop(g:yank_debounce_timer_id)
    let g:yank_debounce_timer_id = timer_start(g:yank_debounce_time_ms, 'Yank')
endfunction

function! Paste(mode)
    let @" = system('win32yank.exe -o --lf')
    return a:mode
endfunction

map <expr> p Paste('p')
map <expr> P Paste('P')


noremap <Leader>n :tabnew \| call RangeChooser()<CR>
noremap <Leader>v :vnew \| call RangeChooser()<CR>
noremap <Leader>T :call TexCompile() <CR>
noremap <Leader>b :Gblame --date=short <CR>
noremap <Leader>d :Gvdiffsplit <CR>

let &t_SI .= "\e[5 q"
let &t_EI .= "\e[1 q"
